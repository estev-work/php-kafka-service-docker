version: '3.8'

services:
  app1:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: app1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - mysql
      - kafka
    networks:
      - app-network
  app2:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: app2
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - mysql
      - kafka
    networks:
      - app-network
  app3:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: app3
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - mysql
      - kafka
    networks:
      - app-network
  app4:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: app4
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - mysql
      - kafka
    networks:
      - app-network

  consumer1:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      - KAFKA_GROUP_ID=consumer-group-1
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - kafka
    networks:
      - app-network

  consumer2:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer2
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      - KAFKA_GROUP_ID=consumer-group-1
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - kafka
    networks:
      - app-network

  consumer3:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer3
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      - KAFKA_GROUP_ID=consumer-group-1
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - kafka
    networks:
      - app-network

  consumer4:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer4
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      - KAFKA_GROUP_ID=consumer-group-1
    volumes:
      - ./project/src:/var/www/html
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - kafka
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    volumes:
      - ./project/src:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "${HTTP_PORT}:80"
    depends_on:
      - app1
      - app2
      - app3
      - app4
    networks:
      - app-network

  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: question_service
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  kafka:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_CLIENT_PORT}"
      ZOOKEEPER_TICK_TIME: "${ZOOKEEPER_TICK_TIME}"
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - kafka
    networks:
      - app-network

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge
